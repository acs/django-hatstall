#!/bin/bash

echo "Running Hatstall"



# Try to copy a config file for SortingHat
cp shdb.cfg grimoirelab-hatstall/django-hatstall

# Try to copy a config file for apache
sudo a2dissite 000-default && \
     sudo cp apache-hatstall.conf /etc/apache2/sites-available/ && \
     sudo a2ensite apache-hatstall && \
     sudo a2enmod ssl

# Link Apache logs to stdout and stderr in order to see them in Docker logs
if [ "$APACHE_LOG_DIR" != "" ]; then
    sudo ln -sf /dev/stderr $APACHE_LOG_DIR/hatstall-error.log
    sudo ln -sf /dev/stdout $APACHE_LOG_DIR/hatstall-access.log
else
    sudo ln -sf /dev/stderr /var/log/apache2/error.log
    sudo ln -sf /dev/stdout /var/log/apache2/access.log
fi

cd grimoirelab-hatstall/django-hatstall

# We make sure the directory where the sqlite3 file is stored has the proper
# permissions (it will be root:root if using a docker volume)
if [[ ! -z $DATABASE_DIR ]]; then
    sudo mkdir -p $DATABASE_DIR
    sudo chown -R www-data:grimoirelab $DATABASE_DIR
    sudo chmod -R 770 $DATABASE_DIR
    sed -e "s|(BASE_DIR, 'db.sqlite3'|(\'$DATABASE_DIR\', 'db.sqlite3'|" -i /home/grimoirelab/grimoirelab-hatstall/django-hatstall/django_hatstall/settings.py
fi

# Fill the secret key, debug false and allow hosts
./config_deployment.py

# Create the data models
python3 manage.py makemigrations
python3 manage.py migrate
python3 manage.py collectstatic --noinput

# Create the initial admin user: admin/admin
PYTHONPATH=. django_hatstall/create_admin_superuser.py

# After creating the sqlite3 file, we make sure the apache user has rw permission
if [[ ! -z $DATABASE_DIR ]]; then
    sudo chown -R www-data:grimoirelab $DATABASE_DIR
    sudo chmod -R 770 $DATABASE_DIR
fi


# Run the Hatstall service with apache2 + mod_wsgi
cd ../..
sudo chown -R www-data grimoirelab-hatstall
sudo apachectl -D FOREGROUND
